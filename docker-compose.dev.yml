version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finbot-postgres-dev
    environment:
      - POSTGRES_DB=finbot_dev
      - POSTGRES_USER=finbot_user
      - POSTGRES_PASSWORD=finbot_dev_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finbot_user -d finbot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finbot-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: finbot-backend-dev
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
      - DATABASE_URL=postgresql://finbot_user:finbot_dev_pass@postgres:5432/finbot_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=finbot-super-secret-jwt-key-development-only
      - JWT_REFRESH_SECRET=finbot-super-secret-refresh-key-development-only
      - ML_SERVICE_URL=http://ml-service:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - finbot-dev-network

  # ML Service
  ml-service:
    build:
      context: ./ml-pipeline
      dockerfile: Dockerfile
    container_name: finbot-ml-service-dev
    ports:
      - "8080:8080"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://finbot_user:finbot_dev_pass@postgres:5432/finbot_dev
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./ml-pipeline:/app
    networks:
      - finbot-dev-network

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: finbot-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_ML_API_URL=http://localhost:8080
    depends_on:
      - backend
      - ml-service
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - finbot-dev-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  finbot-dev-network:
    driver: bridge