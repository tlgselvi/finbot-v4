version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finbot-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-finbot_prod}
      - POSTGRES_USER=${POSTGRES_USER:-finbot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finbot_user} -d ${POSTGRES_DB:-finbot_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finbot-prod-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finbot-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - finbot-prod-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finbot-backend-prod
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - PORT=8001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-finbot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-finbot_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ML_SERVICE_URL=http://ml-service:8080
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finbot-prod-network

  # ML Service
  ml-service:
    build:
      context: ./ml-pipeline
      dockerfile: Dockerfile
    container_name: finbot-ml-service-prod
    ports:
      - "8080:8080"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://${POSTGRES_USER:-finbot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-finbot_prod}
      - ML_MODEL_PATH=/app/models
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ml_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finbot-prod-network

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: finbot-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8001
      - NEXT_PUBLIC_ML_API_URL=http://ml-service:8080
      - NEXT_PUBLIC_APP_NAME=FinBot AI Analytics
      - NEXT_PUBLIC_APP_VERSION=4.0.0
    depends_on:
      - backend
      - ml-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finbot-prod-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: finbot-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - finbot-prod-network

volumes:
  postgres_prod_data:
  redis_prod_data:
  ml_models:

networks:
  finbot-prod-network:
    driver: bridge