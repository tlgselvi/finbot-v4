// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts     Account[]
  transactions Transaction[]
  budgets      Budget[]
  goals        Goal[]
  insights     Insight[]

  @@map("users")
}

model Account {
  id          String      @id @default(cuid())
  userId      String
  name        String
  type        AccountType
  balance     Decimal     @default(0)
  currency    String      @default("USD")
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  accountId   String
  amount      Decimal
  description String?
  category    TransactionCategory
  type        TransactionType
  date        DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  name      String
  category  TransactionCategory
  amount    Decimal
  period    BudgetPeriod
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  targetAmount Decimal
  currentAmount Decimal   @default(0)
  targetDate  DateTime?
  status      GoalStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Insight {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String
  type        InsightType
  priority    Priority
  confidence  Float
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insights")
}

// Enums
enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionCategory {
  FOOD_DINING
  SHOPPING
  ENTERTAINMENT
  BILLS_UTILITIES
  TRANSPORTATION
  HEALTHCARE
  EDUCATION
  TRAVEL
  INVESTMENT
  SALARY
  FREELANCE
  BUSINESS
  OTHER
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum InsightType {
  SPENDING_PATTERN
  BUDGET_ALERT
  SAVING_OPPORTUNITY
  ANOMALY_DETECTION
  GOAL_PROGRESS
  RISK_ASSESSMENT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}