# FinBot v4 - External Secrets Operator
# Kubernetes integration with HashiCorp Vault for secret management

---
# External Secrets Operator Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets
  labels:
    name: external-secrets
    app.kubernetes.io/name: external-secrets

---
# External Secrets Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets
  namespace: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-secrets
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: external-secrets
      containers:
      - name: external-secrets
        image: ghcr.io/external-secrets/external-secrets:v0.9.9
        ports:
        - name: metrics
          containerPort: 8080
        args:
        - --concurrent=1
        - --metrics-addr=:8080
        - --enable-leader-election
        env:
        - name: ES_LOG_LEVEL
          value: "info"
        - name: ES_LOG_FORMAT
          value: "json"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - external-secrets
              topologyKey: kubernetes.io/hostname

---
# External Secrets Webhook Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-webhook
  namespace: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: webhook
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
      app.kubernetes.io/component: webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-secrets
        app.kubernetes.io/component: webhook
    spec:
      serviceAccountName: external-secrets-webhook
      containers:
      - name: webhook
        image: ghcr.io/external-secrets/external-secrets:v0.9.9
        ports:
        - name: webhook
          containerPort: 10250
        - name: metrics
          containerPort: 8080
        args:
        - webhook
        - --port=10250
        - --metrics-addr=:8080
        env:
        - name: ES_LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10

---
# External Secrets Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets

---
# External Secrets Webhook Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-webhook
  namespace: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: webhook

---
# External Secrets ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
  labels:
    app.kubernetes.io/name: external-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "clustersecretstores", "externalsecrets"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores/status", "clustersecretstores/status", "externalsecrets/status"]
  verbs: ["update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores/finalizers", "clustersecretstores/finalizers", "externalsecrets/finalizers"]
  verbs: ["update"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]

---
# External Secrets ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
  labels:
    app.kubernetes.io/name: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
- kind: ServiceAccount
  name: external-secrets
  namespace: external-secrets

---
# Vault SecretStore for Production
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: production
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-production"
          serviceAccountRef:
            name: "finbot-production"
      caProvider:
        type: "Secret"
        name: "vault-ca"
        key: "ca.crt"

---
# Vault SecretStore for Database
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend-database
  namespace: database
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-database"
          serviceAccountRef:
            name: "finbot-database"

---
# Vault SecretStore for Cache
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend-cache
  namespace: cache
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  provider:
    vault:
      server: "https://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-cache"
          serviceAccountRef:
            name: "finbot-cache"

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-credentials
  namespace: database
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend-database
    kind: SecretStore
  target:
    name: postgres-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        database: "{{ .database }}"
        connection-string: "postgresql://{{ .username }}:{{ .password }}@postgres-primary.database.svc.cluster.local:5432/{{ .database }}"
  data:
  - secretKey: username
    remoteRef:
      key: finbot/database
      property: username
  - secretKey: password
    remoteRef:
      key: finbot/database
      property: password
  - secretKey: database
    remoteRef:
      key: finbot/database
      property: database

---
# External Secret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-cluster-secret
  namespace: cache
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend-cache
    kind: SecretStore
  target:
    name: redis-cluster-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
        connection-string: "redis://:{{ .password }}@redis-cluster.cache.svc.cluster.local:6379"
  data:
  - secretKey: password
    remoteRef:
      key: finbot/redis
      property: password

---
# External Secret for Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-app-secrets
  namespace: production
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: finbot-app-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        database-url: "{{ .database_url }}"
        redis-url: "{{ .redis_url }}"
        jwt-secret: "{{ .jwt_secret }}"
        encryption-key: "{{ .encryption_key }}"
        api-key: "{{ .api_key }}"
        webhook-secret: "{{ .webhook_secret }}"
  data:
  - secretKey: database_url
    remoteRef:
      key: finbot/application
      property: database_url
  - secretKey: redis_url
    remoteRef:
      key: finbot/application
      property: redis_url
  - secretKey: jwt_secret
    remoteRef:
      key: finbot/application
      property: jwt_secret
  - secretKey: encryption_key
    remoteRef:
      key: finbot/application
      property: encryption_key
  - secretKey: api_key
    remoteRef:
      key: finbot/application
      property: api_key
  - secretKey: webhook_secret
    remoteRef:
      key: finbot/application
      property: webhook_secret

---
# External Secret for Backup Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backup-credentials
  namespace: database
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  refreshInterval: 60s
  secretStoreRef:
    name: vault-backend-database
    kind: SecretStore
  target:
    name: backup-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        ACCESS_KEY_ID: "{{ .access_key_id }}"
        SECRET_ACCESS_KEY: "{{ .secret_access_key }}"
        DEFAULT_REGION: "{{ .region }}"
  data:
  - secretKey: access_key_id
    remoteRef:
      key: finbot/backup
      property: access_key_id
  - secretKey: secret_access_key
    remoteRef:
      key: finbot/backup
      property: secret_access_key
  - secretKey: region
    remoteRef:
      key: finbot/backup
      property: region

---
# Vault Authentication Configuration Job
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-auth-config
  namespace: vault
  labels:
    app.kubernetes.io/name: vault
    component: auth-config
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault
        component: auth-config
    spec:
      serviceAccountName: vault
      restartPolicy: OnFailure
      containers:
      - name: vault-config
        image: vault:1.15.2
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault.svc.cluster.local:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Configuring Vault authentication..."
          
          # Wait for Vault to be ready and unsealed
          until vault status | grep -q "Sealed.*false"; do
            echo "Waiting for Vault to be unsealed..."
            sleep 5
          done
          
          # Login with root token (in production, use proper authentication)
          # vault auth -method=userpass username=admin password=admin
          
          # Enable Kubernetes auth method
          vault auth enable -path=kubernetes kubernetes || echo "Kubernetes auth already enabled"
          
          # Configure Kubernetes auth
          vault write auth/kubernetes/config \
            token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
            kubernetes_host="https://kubernetes.default.svc.cluster.local" \
            kubernetes_ca_cert="$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)"
          
          # Create policies for different namespaces
          vault policy write finbot-production - <<EOF
          path "secret/data/finbot/application/*" {
            capabilities = ["read"]
          }
          path "secret/data/finbot/database/*" {
            capabilities = ["read"]
          }
          path "secret/data/finbot/redis/*" {
            capabilities = ["read"]
          }
          EOF
          
          vault policy write finbot-database - <<EOF
          path "secret/data/finbot/database/*" {
            capabilities = ["read"]
          }
          path "secret/data/finbot/backup/*" {
            capabilities = ["read"]
          }
          EOF
          
          vault policy write finbot-cache - <<EOF
          path "secret/data/finbot/redis/*" {
            capabilities = ["read"]
          }
          EOF
          
          # Create roles for service accounts
          vault write auth/kubernetes/role/finbot-production \
            bound_service_account_names=finbot-production \
            bound_service_account_namespaces=production \
            policies=finbot-production \
            ttl=24h
          
          vault write auth/kubernetes/role/finbot-database \
            bound_service_account_names=finbot-database \
            bound_service_account_namespaces=database \
            policies=finbot-database \
            ttl=24h
          
          vault write auth/kubernetes/role/finbot-cache \
            bound_service_account_names=finbot-cache \
            bound_service_account_namespaces=cache \
            policies=finbot-cache \
            ttl=24h
          
          # Enable KV v2 secrets engine
          vault secrets enable -path=secret kv-v2 || echo "KV v2 already enabled"
          
          # Store initial secrets (in production, these would be set securely)
          vault kv put secret/finbot/application \
            database_url="postgresql://finbot_user:finbot_password_2024@postgres-primary.database.svc.cluster.local:5432/finbot_v4" \
            redis_url="redis://:redis_password_2024@redis-cluster.cache.svc.cluster.local:6379" \
            jwt_secret="$(openssl rand -base64 32)" \
            encryption_key="$(openssl rand -base64 32)" \
            api_key="$(openssl rand -base64 32)" \
            webhook_secret="$(openssl rand -base64 32)"
          
          vault kv put secret/finbot/database \
            username="finbot_user" \
            password="finbot_password_2024" \
            database="finbot_v4"
          
          vault kv put secret/finbot/redis \
            password="redis_password_2024"
          
          vault kv put secret/finbot/backup \
            access_key_id="AKIAIOSFODNN7EXAMPLE" \
            secret_access_key="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" \
            region="us-west-2"
          
          echo "Vault authentication configuration completed"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      activeDeadlineSeconds: 600

---
# External Secrets Service Account ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "clustersecretstores", "externalsecrets"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores/status", "clustersecretstores/status", "externalsecrets/status"]
  verbs: ["update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores/finalizers", "clustersecretstores/finalizers", "externalsecrets/finalizers"]
  verbs: ["update"]

---
# External Secrets ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets
subjects:
- kind: ServiceAccount
  name: external-secrets
  namespace: external-secrets

---
# External Secrets Webhook Service
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-webhook
  namespace: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: webhook
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    targetPort: 10250
    protocol: TCP
  selector:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: webhook

---
# External Secrets Service Monitor
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: external-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  namespaceSelector:
    matchNames:
    - external-secrets

---
# Secret Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: vault
  labels:
    app.kubernetes.io/name: vault
    component: rotation
spec:
  schedule: "0 2 1 * *"  # Monthly on 1st at 2 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vault
            component: rotation
        spec:
          serviceAccountName: vault
          restartPolicy: OnFailure
          containers:
          - name: secret-rotator
            image: vault:1.15.2
            env:
            - name: VAULT_ADDR
              value: "https://vault.vault.svc.cluster.local:8200"
            - name: VAULT_SKIP_VERIFY
              value: "true"
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Starting secret rotation at $(date)"
              
              # Rotate JWT secret
              NEW_JWT_SECRET=$(openssl rand -base64 32)
              vault kv patch secret/finbot/application jwt_secret="$NEW_JWT_SECRET"
              
              # Rotate encryption key
              NEW_ENCRYPTION_KEY=$(openssl rand -base64 32)
              vault kv patch secret/finbot/application encryption_key="$NEW_ENCRYPTION_KEY"
              
              # Rotate API key
              NEW_API_KEY=$(openssl rand -base64 32)
              vault kv patch secret/finbot/application api_key="$NEW_API_KEY"
              
              # Rotate webhook secret
              NEW_WEBHOOK_SECRET=$(openssl rand -base64 32)
              vault kv patch secret/finbot/application webhook_secret="$NEW_WEBHOOK_SECRET"
              
              echo "Secret rotation completed at $(date)"
              echo "Note: Application restart may be required for new secrets to take effect"
            resources:
              requests:
                cpu: 50m
                memory: 64Mi
              limits:
                cpu: 200m
                memory: 256Mi
          activeDeadlineSeconds: 600