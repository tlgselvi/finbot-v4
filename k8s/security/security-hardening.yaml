# FinBot v4 - Security Hardening Measures
# Pod Security Standards, Network Policies, and Admission Controllers

---
# Pod Security Policy (Deprecated but shown for reference)
# Using Pod Security Standards instead
apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    name: production
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/enforce-version: latest

---
# Staging Namespace with Baseline Security
apiVersion: v1
kind: Namespace
metadata:
  name: staging
  labels:
    name: staging
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/enforce-version: latest

---
# Network Policy for Production Namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finbot-production-network-policy
  namespace: production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from istio-system (ingress gateway)
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3001 # API port
    - protocol: TCP
      port: 80   # Web port
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080 # Metrics port
  # Allow intra-namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
  egress:
  # Allow egress to database namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432 # PostgreSQL
  # Allow egress to cache namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379 # Redis
  # Allow egress to security namespace (Vault)
  - to:
    - namespaceSelector:
        matchLabels:
          name: security
    ports:
    - protocol: TCP
      port: 8200 # Vault
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Network Policy for Database Namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finbot-database-network-policy
  namespace: database
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow ingress from production and staging
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
    - namespaceSelector:
        matchLabels:
          name: staging
    ports:
    - protocol: TCP
      port: 5432
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9187 # PostgreSQL exporter
  # Allow intra-namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: database
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow backup to external storage
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Network Policy for Cache Namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finbot-cache-network-policy
  namespace: cache
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow ingress from production and staging
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
    - namespaceSelector:
        matchLabels:
          name: staging
    ports:
    - protocol: TCP
      port: 6379
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9121 # Redis exporter
  # Allow intra-namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: cache
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy for Monitoring Namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finbot-monitoring-network-policy
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from istio-system for Grafana access
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3000 # Grafana
  # Allow intra-namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  # Allow scraping from all namespaces
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 8080 # Common metrics port
    - protocol: TCP
      port: 9090 # Prometheus
    - protocol: TCP
      port: 9187 # PostgreSQL exporter
    - protocol: TCP
      port: 9121 # Redis exporter
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow external alerting
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Security Context Constraints (OpenShift) / Pod Security Standards
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-context-defaults
  namespace: kube-system
data:
  default-security-context.yaml: |
    # Default security context for all pods
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault

---
# Admission Controller Configuration
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: finbot-security-validation
spec:
  clientConfig:
    service:
      name: security-validation-webhook
      namespace: security
      path: /validate
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "daemonsets", "statefulsets"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
  namespaceSelector:
    matchLabels:
      security-validation: "enabled"

---
# Security Validation Webhook Service
apiVersion: v1
kind: Service
metadata:
  name: security-validation-webhook
  namespace: security
spec:
  selector:
    app: security-validation-webhook
  ports:
  - name: webhook
    port: 443
    targetPort: 8443
    protocol: TCP

---
# Security Validation Webhook Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-validation-webhook
  namespace: security
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-validation-webhook
  template:
    metadata:
      labels:
        app: security-validation-webhook
    spec:
      serviceAccountName: security-validation-webhook
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: webhook
        image: finbot/security-validation-webhook:v1.0.0
        ports:
        - containerPort: 8443
          name: webhook
        env:
        - name: TLS_CERT_FILE
          value: /etc/certs/tls.crt
        - name: TLS_PRIVATE_KEY_FILE
          value: /etc/certs/tls.key
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: certs
        secret:
          secretName: security-validation-webhook-certs

---
# Security Validation Webhook Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-validation-webhook
  namespace: security

---
# Security Validation Webhook RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-validation-webhook
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-validation-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: security-validation-webhook
subjects:
- kind: ServiceAccount
  name: security-validation-webhook
  namespace: security

---
# Image Security Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: image-security-policy
  namespace: security
data:
  policy.yaml: |
    # Image security policy configuration
    allowedRegistries:
      - "docker.io/library"
      - "gcr.io/distroless"
      - "ghcr.io/finbot"
      - "registry.k8s.io"
      - "quay.io"
    
    blockedRegistries:
      - "docker.io/untrusted"
    
    requiredLabels:
      - "version"
      - "maintainer"
    
    vulnerabilityPolicy:
      maxCritical: 0
      maxHigh: 2
      maxMedium: 10
    
    signatureVerification:
      enabled: true
      publicKeys:
        - "/etc/cosign/cosign.pub"

---
# Container Runtime Security Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: runtime-security-config
  namespace: kube-system
data:
  runtime-config.yaml: |
    # Runtime security configuration
    defaultSeccompProfile: "runtime/default"
    defaultAppArmorProfile: "runtime/default"
    
    # Syscall restrictions
    blockedSyscalls:
      - "mount"
      - "umount"
      - "reboot"
      - "swapon"
      - "swapoff"
    
    # Capability restrictions
    blockedCapabilities:
      - "SYS_ADMIN"
      - "NET_ADMIN"
      - "SYS_TIME"
      - "SYS_MODULE"
    
    # File system restrictions
    readOnlyPaths:
      - "/proc/sys"
      - "/proc/sysrq-trigger"
      - "/proc/irq"
      - "/proc/bus"

---
# Falco Security Monitoring
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: security
  labels:
    app: falco
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
    spec:
      serviceAccountName: falco
      hostNetwork: true
      hostPID: true
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      containers:
      - name: falco
        image: falcosecurity/falco:0.36.2
        args:
        - /usr/bin/falco
        - --cri=/run/containerd/containerd.sock
        - --k8s-api=https://kubernetes.default.svc.cluster.local
        - --k8s-api-cert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - --k8s-api-token=/var/run/secrets/kubernetes.io/serviceaccount/token
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host/var/run/docker.sock
          name: docker-socket
        - mountPath: /host/run/containerd/containerd.sock
          name: containerd-socket
        - mountPath: /host/dev
          name: dev-fs
        - mountPath: /host/proc
          name: proc-fs
          readOnly: true
        - mountPath: /host/boot
          name: boot-fs
          readOnly: true
        - mountPath: /host/lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
        - mountPath: /etc/falco
          name: falco-config
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
      - name: dev-fs
        hostPath:
          path: /dev
      - name: proc-fs
        hostPath:
          path: /proc
      - name: boot-fs
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr-fs
        hostPath:
          path: /usr
      - name: etc-fs
        hostPath:
          path: /etc
      - name: falco-config
        configMap:
          name: falco-config

---
# Falco Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: security
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d
    
    time_format_iso_8601: true
    json_output: true
    json_include_output_property: true
    json_include_tags_property: true
    
    log_stderr: true
    log_syslog: true
    log_level: info
    
    priority: debug
    
    buffered_outputs: false
    
    syscall_event_drops:
      actions:
        - log
        - alert
      rate: 0.03333
      max_burst: 1000
    
    outputs:
      rate: 1
      max_burst: 1000
    
    syslog_output:
      enabled: true
    
    file_output:
      enabled: false
    
    stdout_output:
      enabled: true
    
    webserver:
      enabled: true
      listen_port: 8765
      k8s_healthz_endpoint: /healthz
      ssl_enabled: false
    
    grpc:
      enabled: false
    
    grpc_output:
      enabled: false

---
# Falco Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: security

---
# Falco RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
- apiGroups: [""]
  resources: ["nodes", "namespaces", "pods", "replicationcontrollers", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["daemonsets", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
- kind: ServiceAccount
  name: falco
  namespace: security

---
# Security Monitoring Service
apiVersion: v1
kind: Service
metadata:
  name: falco
  namespace: security
  labels:
    app: falco
spec:
  selector:
    app: falco
  ports:
  - name: http
    port: 8765
    targetPort: 8765
    protocol: TCP