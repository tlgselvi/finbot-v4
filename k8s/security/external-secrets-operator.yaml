# FinBot v4 - External Secrets Operator Configuration
# Integration with HashiCorp Vault for secret management

---
# External Secrets Operator Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/warn: baseline

---
# External Secrets Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/version: v0.9.11
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-secrets
    spec:
      serviceAccountName: external-secrets
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: external-secrets
        image: ghcr.io/external-secrets/external-secrets:v0.9.11
        imagePullPolicy: IfNotPresent
        args:
        - --concurrent=10
        - --enable-leader-election
        - --leader-election-namespace=external-secrets-system
        - --metrics-addr=:8080
        - --health-probe-bind-address=:8081
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: healthz
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: external-secrets
              topologyKey: kubernetes.io/hostname

---
# External Secrets Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets

---
# External Secrets ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "clustersecretstores", "externalsecrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores/status", "clustersecretstores/status", "externalsecrets/status"]
  verbs: ["get", "update", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# External Secrets ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets
  labels:
    app.kubernetes.io/name: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets
subjects:
- kind: ServiceAccount
  name: external-secrets
  namespace: external-secrets-system

---
# External Secrets Service
apiVersion: v1
kind: Service
metadata:
  name: external-secrets
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  selector:
    app.kubernetes.io/name: external-secrets
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  - name: healthz
    port: 8081
    targetPort: healthz
    protocol: TCP

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: external-secrets
  namespace: external-secrets-system
  labels:
    app.kubernetes.io/name: external-secrets
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Vault SecretStore for Production
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: production
spec:
  provider:
    vault:
      server: "https://vault.security.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-production"
          serviceAccountRef:
            name: "finbot-production"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----

---
# Vault SecretStore for Staging
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: staging
spec:
  provider:
    vault:
      server: "https://vault.security.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-staging"
          serviceAccountRef:
            name: "finbot-staging"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----

---
# Vault SecretStore for Database
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: database
spec:
  provider:
    vault:
      server: "https://vault.security.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-database"
          serviceAccountRef:
            name: "finbot-database"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----

---
# Vault SecretStore for Cache
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: cache
spec:
  provider:
    vault:
      server: "https://vault.security.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-cache"
          serviceAccountRef:
            name: "finbot-cache"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----

---
# Cluster SecretStore for Global Secrets
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-cluster-backend
spec:
  provider:
    vault:
      server: "https://vault.security.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-cluster-admin"
          serviceAccountRef:
            name: "external-secrets"
            namespace: "external-secrets-system"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # Vault CA certificate will be injected here
        -----END CERTIFICATE-----

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: production
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
        connection-string: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?sslmode=require"
  data:
  - secretKey: username
    remoteRef:
      key: finbot/database/production
      property: username
  - secretKey: password
    remoteRef:
      key: finbot/database/production
      property: password
  - secretKey: host
    remoteRef:
      key: finbot/database/production
      property: host
  - secretKey: port
    remoteRef:
      key: finbot/database/production
      property: port
  - secretKey: database
    remoteRef:
      key: finbot/database/production
      property: database

---
# External Secret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: production
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        connection-string: "redis://:{{ .password }}@{{ .host }}:{{ .port }}/0"
  data:
  - secretKey: password
    remoteRef:
      key: finbot/redis/production
      property: password
  - secretKey: host
    remoteRef:
      key: finbot/redis/production
      property: host
  - secretKey: port
    remoteRef:
      key: finbot/redis/production
      property: port

---
# External Secret for API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: production
spec:
  refreshInterval: 600s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        jwt-secret: "{{ .jwt_secret }}"
        stripe-api-key: "{{ .stripe_api_key }}"
        stripe-webhook-secret: "{{ .stripe_webhook_secret }}"
        auth0-client-id: "{{ .auth0_client_id }}"
        auth0-client-secret: "{{ .auth0_client_secret }}"
        slack-webhook-url: "{{ .slack_webhook_url }}"
        sendgrid-api-key: "{{ .sendgrid_api_key }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: finbot/api/production
      property: jwt_secret
  - secretKey: stripe_api_key
    remoteRef:
      key: finbot/integrations/stripe
      property: api_key
  - secretKey: stripe_webhook_secret
    remoteRef:
      key: finbot/integrations/stripe
      property: webhook_secret
  - secretKey: auth0_client_id
    remoteRef:
      key: finbot/integrations/auth0
      property: client_id
  - secretKey: auth0_client_secret
    remoteRef:
      key: finbot/integrations/auth0
      property: client_secret
  - secretKey: slack_webhook_url
    remoteRef:
      key: finbot/integrations/slack
      property: webhook_url
  - secretKey: sendgrid_api_key
    remoteRef:
      key: finbot/integrations/sendgrid
      property: api_key

---
# External Secret for TLS Certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: production
spec:
  refreshInterval: 86400s # 24 hours
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: finbot-tls-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
        ca.crt: "{{ .ca_certificate }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: finbot/tls/production
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: finbot/tls/production
      property: private_key
  - secretKey: ca_certificate
    remoteRef:
      key: finbot/tls/production
      property: ca_certificate

---
# External Secret for Monitoring Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-credentials
  namespace: monitoring
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: monitoring-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        grafana-admin-password: "{{ .grafana_admin_password }}"
        prometheus-basic-auth: "{{ .prometheus_basic_auth }}"
        alertmanager-webhook-url: "{{ .alertmanager_webhook_url }}"
        pagerduty-integration-key: "{{ .pagerduty_integration_key }}"
  data:
  - secretKey: grafana_admin_password
    remoteRef:
      key: finbot/monitoring/credentials
      property: grafana_admin_password
  - secretKey: prometheus_basic_auth
    remoteRef:
      key: finbot/monitoring/credentials
      property: prometheus_basic_auth
  - secretKey: alertmanager_webhook_url
    remoteRef:
      key: finbot/monitoring/credentials
      property: alertmanager_webhook_url
  - secretKey: pagerduty_integration_key
    remoteRef:
      key: finbot/monitoring/credentials
      property: pagerduty_integration_key

---
# Secret Rotation Policy
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rotating-secrets
  namespace: production
  annotations:
    external-secrets.io/rotation-policy: "daily"
spec:
  refreshInterval: 3600s # 1 hour
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: rotating-secrets
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      type: Opaque
      data:
        api-token: "{{ .api_token }}"
        session-key: "{{ .session_key }}"
  data:
  - secretKey: api_token
    remoteRef:
      key: finbot/rotating/production
      property: api_token
  - secretKey: session_key
    remoteRef:
      key: finbot/rotating/production
      property: session_key

---
# External Secrets Webhook Configuration
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: external-secrets-webhook
spec:
  clientConfig:
    service:
      name: external-secrets-webhook
      namespace: external-secrets-system
      path: /validate
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["external-secrets.io"]
    apiVersions: ["v1beta1"]
    resources: ["externalsecrets", "secretstores", "clustersecretstores"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail

---
# External Secrets Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-secrets-config
  namespace: external-secrets-system
data:
  config.yaml: |
    # External Secrets Operator Configuration
    concurrent: 10
    enableLeaderElection: true
    leaderElectionNamespace: external-secrets-system
    
    # Metrics and health check configuration
    metricsAddr: ":8080"
    healthProbeBindAddress: ":8081"
    
    # Secret refresh configuration
    defaultRefreshInterval: "300s"
    maxRefreshInterval: "86400s"
    
    # Vault configuration
    vault:
      defaultTimeout: "30s"
      maxRetries: 3
      retryDelay: "5s"
    
    # Security settings
    security:
      enableSecretValidation: true
      allowedSecretTypes:
        - "Opaque"
        - "kubernetes.io/tls"
        - "kubernetes.io/basic-auth"
        - "kubernetes.io/dockerconfigjson"
    
    # Logging configuration
    logging:
      level: "info"
      format: "json"
      development: false