apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system

---
# External Secrets Operator Helm Chart Installation
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: external-secrets-operator
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.external-secrets.io
    chart: external-secrets
    targetRevision: 0.9.11
    helm:
      values: |
        installCRDs: true
        replicaCount: 2
        
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
            
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          
        podSecurityContext:
          fsGroup: 65534
          
        serviceMonitor:
          enabled: true
          namespace: external-secrets-system
          
        webhook:
          replicaCount: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
              
        certController:
          replicaCount: 2
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
              
  destination:
    server: https://kubernetes.default.svc
    namespace: external-secrets-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true

---
# ClusterSecretStore for HashiCorp Vault
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend
spec:
  provider:
    vault:
      server: "https://vault.finbot.local"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "external-secrets"
          serviceAccountRef:
            name: "external-secrets-sa"
            namespace: "external-secrets-system"

---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: external-secrets-system
  annotations:
    vault.hashicorp.com/role: "external-secrets"

---
# ClusterRole for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "clustersecretstores", "externalsecrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: external-secrets-system

---
# SecretStore for FinBot Production
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: finbot-vault-store
  namespace: finbot-production
spec:
  provider:
    vault:
      server: "https://vault.finbot.local"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "finbot-production"
          serviceAccountRef:
            name: "finbot-api-sa"

---
# ExternalSecret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-database-secret
  namespace: finbot-production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-database-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@postgres-primary:5432/finbot_production"
        DB_USERNAME: "{{ .username }}"
        DB_PASSWORD: "{{ .password }}"
        DB_HOST: "postgres-primary"
        DB_PORT: "5432"
        DB_NAME: "finbot_production"
  data:
  - secretKey: username
    remoteRef:
      key: database/finbot-production
      property: username
  - secretKey: password
    remoteRef:
      key: database/finbot-production
      property: password

---
# ExternalSecret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-redis-secret
  namespace: finbot-production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-redis-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        REDIS_URL: "redis://:{{ .password }}@redis-master:6379/0"
        REDIS_PASSWORD: "{{ .password }}"
        REDIS_HOST: "redis-master"
        REDIS_PORT: "6379"
  data:
  - secretKey: password
    remoteRef:
      key: redis/finbot-production
      property: password

---
# ExternalSecret for JWT and Encryption Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-auth-secret
  namespace: finbot-production
spec:
  refreshInterval: 6h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-auth-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        JWT_REFRESH_SECRET: "{{ .jwt_refresh_secret }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
        API_SECRET: "{{ .api_secret }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: auth/finbot-production
      property: jwt_secret
  - secretKey: jwt_refresh_secret
    remoteRef:
      key: auth/finbot-production
      property: jwt_refresh_secret
  - secretKey: encryption_key
    remoteRef:
      key: auth/finbot-production
      property: encryption_key
  - secretKey: api_secret
    remoteRef:
      key: auth/finbot-production
      property: api_secret

---
# ExternalSecret for External Service API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-external-apis-secret
  namespace: finbot-production
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-external-apis-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        SMTP_HOST: "{{ .smtp_host }}"
        SMTP_PORT: "{{ .smtp_port }}"
        SMTP_USER: "{{ .smtp_user }}"
        SMTP_PASSWORD: "{{ .smtp_password }}"
        SMS_API_KEY: "{{ .sms_api_key }}"
        SLACK_WEBHOOK_URL: "{{ .slack_webhook_url }}"
        STRIPE_SECRET_KEY: "{{ .stripe_secret_key }}"
        PAYPAL_CLIENT_SECRET: "{{ .paypal_client_secret }}"
  data:
  - secretKey: smtp_host
    remoteRef:
      key: external-apis/finbot-production
      property: smtp_host
  - secretKey: smtp_port
    remoteRef:
      key: external-apis/finbot-production
      property: smtp_port
  - secretKey: smtp_user
    remoteRef:
      key: external-apis/finbot-production
      property: smtp_user
  - secretKey: smtp_password
    remoteRef:
      key: external-apis/finbot-production
      property: smtp_password
  - secretKey: sms_api_key
    remoteRef:
      key: external-apis/finbot-production
      property: sms_api_key
  - secretKey: slack_webhook_url
    remoteRef:
      key: external-apis/finbot-production
      property: slack_webhook_url
  - secretKey: stripe_secret_key
    remoteRef:
      key: external-apis/finbot-production
      property: stripe_secret_key
  - secretKey: paypal_client_secret
    remoteRef:
      key: external-apis/finbot-production
      property: paypal_client_secret

---
# ExternalSecret for Monitoring Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-monitoring-secret
  namespace: finbot-monitoring
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-monitoring-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        GRAFANA_ADMIN_PASSWORD: "{{ .grafana_admin_password }}"
        PROMETHEUS_ADMIN_PASSWORD: "{{ .prometheus_admin_password }}"
        ALERTMANAGER_WEBHOOK_URL: "{{ .alertmanager_webhook_url }}"
  data:
  - secretKey: grafana_admin_password
    remoteRef:
      key: monitoring/finbot-production
      property: grafana_admin_password
  - secretKey: prometheus_admin_password
    remoteRef:
      key: monitoring/finbot-production
      property: prometheus_admin_password
  - secretKey: alertmanager_webhook_url
    remoteRef:
      key: monitoring/finbot-production
      property: alertmanager_webhook_url

---
# Secret Rotation Policy
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: finbot-rotating-secrets
  namespace: finbot-production
  annotations:
    external-secrets.io/rotation-policy: "weekly"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: finbot-vault-store
    kind: SecretStore
  target:
    name: finbot-rotating-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        SESSION_SECRET: "{{ .session_secret }}"
        CSRF_SECRET: "{{ .csrf_secret }}"
        WEBHOOK_SECRET: "{{ .webhook_secret }}"
  data:
  - secretKey: session_secret
    remoteRef:
      key: rotating/finbot-production
      property: session_secret
  - secretKey: csrf_secret
    remoteRef:
      key: rotating/finbot-production
      property: csrf_secret
  - secretKey: webhook_secret
    remoteRef:
      key: rotating/finbot-production
      property: webhook_secret