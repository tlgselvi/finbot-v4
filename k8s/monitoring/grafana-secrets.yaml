# FinBot v4 - Grafana Secrets Configuration
# External Secrets for Grafana credentials and configuration

---
# Grafana Admin Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: grafana-credentials
  namespace: monitoring
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: grafana-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        admin-user: "{{ .admin_user }}"
        admin-password: "{{ .admin_password }}"
        secret-key: "{{ .secret_key }}"
  data:
  - secretKey: admin_user
    remoteRef:
      key: finbot/monitoring/credentials
      property: grafana_admin_user
  - secretKey: admin_password
    remoteRef:
      key: finbot/monitoring/credentials
      property: grafana_admin_password
  - secretKey: secret_key
    remoteRef:
      key: finbot/monitoring/credentials
      property: grafana_secret_key

---
# Grafana Database Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: grafana-db-credentials
  namespace: monitoring
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: grafana-db-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
  data:
  - secretKey: username
    remoteRef:
      key: finbot/database/grafana
      property: username
  - secretKey: password
    remoteRef:
      key: finbot/database/grafana
      property: password

---
# Grafana OAuth Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: grafana-oauth
  namespace: monitoring
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: grafana-oauth
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        client-id: "{{ .client_id }}"
        client-secret: "{{ .client_secret }}"
  data:
  - secretKey: client_id
    remoteRef:
      key: finbot/integrations/auth0-grafana
      property: client_id
  - secretKey: client_secret
    remoteRef:
      key: finbot/integrations/auth0-grafana
      property: client_secret

---
# Grafana SMTP Credentials External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: grafana-smtp
  namespace: monitoring
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: grafana-smtp
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
  data:
  - secretKey: username
    remoteRef:
      key: finbot/integrations/smtp
      property: username
  - secretKey: password
    remoteRef:
      key: finbot/integrations/smtp
      property: password

---
# Grafana ServiceMonitor
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: grafana
  namespace: monitoring
  labels:
    team: finbot
    app: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  endpoints:
  - port: http
    interval: 30s
    path: /metrics

---
# Grafana Ingress (Istio Gateway)
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-gateway
  namespace: monitoring
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: grafana-tls-secret
    hosts:
    - "grafana.finbot.com"
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "grafana.finbot.com"
    tls:
      httpsRedirect: true

---
# Grafana VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-vs
  namespace: monitoring
spec:
  hosts:
  - "grafana.finbot.com"
  gateways:
  - grafana-gateway
  http:
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: grafana.monitoring.svc.cluster.local
        port:
          number: 3000
    timeout: 30s
    headers:
      response:
        set:
          x-content-type-options: nosniff
          x-frame-options: DENY
          x-xss-protection: "1; mode=block"
          strict-transport-security: "max-age=31536000; includeSubDomains"

---
# Grafana TLS Certificate External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: grafana-tls-certificate
  namespace: monitoring
spec:
  refreshInterval: 86400s # 24 hours
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: grafana-tls-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
        ca.crt: "{{ .ca_certificate }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: finbot/tls/grafana
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: finbot/tls/grafana
      property: private_key
  - secretKey: ca_certificate
    remoteRef:
      key: finbot/tls/grafana
      property: ca_certificate

---
# Grafana Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from istio-system (ingress gateway)
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3000
  # Allow intra-namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  # Allow egress to Prometheus
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090 # Prometheus
    - protocol: TCP
      port: 9093 # AlertManager
    - protocol: TCP
      port: 16686 # Jaeger
    - protocol: TCP
      port: 3100 # Loki
  # Allow egress to database
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432 # PostgreSQL
  # Allow egress to cache
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379 # Redis
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external services (Auth0, SMTP)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587 # SMTP

---
# Grafana Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-backup
  namespace: monitoring
spec:
  schedule: "0 2 * * *" # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: grafana-backup
          restartPolicy: OnFailure
          containers:
          - name: grafana-backup
            image: grafana/grafana:10.2.0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Starting Grafana backup..."
              
              # Export dashboards
              curl -u admin:$GRAFANA_PASSWORD \
                http://grafana.monitoring.svc.cluster.local:3000/api/search?type=dash-db | \
                jq -r '.[] | .uid' | \
                while read uid; do
                  echo "Backing up dashboard: $uid"
                  curl -u admin:$GRAFANA_PASSWORD \
                    "http://grafana.monitoring.svc.cluster.local:3000/api/dashboards/uid/$uid" | \
                    jq '.dashboard' > "/backup/dashboard-$uid.json"
                done
              
              # Export datasources
              curl -u admin:$GRAFANA_PASSWORD \
                http://grafana.monitoring.svc.cluster.local:3000/api/datasources | \
                jq '.' > /backup/datasources.json
              
              # Export folders
              curl -u admin:$GRAFANA_PASSWORD \
                http://grafana.monitoring.svc.cluster.local:3000/api/folders | \
                jq '.' > /backup/folders.json
              
              # Create backup archive
              tar -czf "/backup/grafana-backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C /backup *.json
              
              echo "Grafana backup completed!"
            env:
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: admin-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: grafana-backup-storage

---
# Grafana Backup Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-backup
  namespace: monitoring

---
# Grafana Backup PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-backup-storage
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi