# FinBot v4 - API Application Deployment
# Production-ready API deployment with optimized configurations

---
# FinBot API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: finbot-api
  namespace: production
  labels:
    app: finbot-api
    version: v4.0.0
    component: backend
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: finbot-api
  template:
    metadata:
      labels:
        app: finbot-api
        version: v4.0.0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
    spec:
      serviceAccountName: finbot-production
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: db-migration
        image: ghcr.io/finbot/finbot-api:v4.0.0
        command: ['npm', 'run', 'db:migrate']
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: connection-string
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: connection-string
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      containers:
      - name: finbot-api
        image: ghcr.io/finbot/finbot-api:v4.0.0
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: METRICS_PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: connection-string
        - name: DATABASE_POOL_MIN
          value: "5"
        - name: DATABASE_POOL_MAX
          value: "20"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: connection-string
        - name: REDIS_POOL_MIN
          value: "5"
        - name: REDIS_POOL_MAX
          value: "20"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: jwt-secret
        - name: JWT_EXPIRES_IN
          value: "24h"
        - name: BCRYPT_ROUNDS
          value: "12"
        - name: RATE_LIMIT_WINDOW_MS
          value: "900000"  # 15 minutes
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "1000"
        - name: CORS_ORIGIN
          value: "https://app.finbot.com,https://admin.finbot.com"
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: stripe-api-key
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: stripe-webhook-secret
        - name: AUTH0_DOMAIN
          value: "finbot.auth0.com"
        - name: AUTH0_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: auth0-client-id
        - name: AUTH0_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: auth0-client-secret
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: sendgrid-api-key
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: slack-webhook-url
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: encryption-key
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: session-secret
        - name: JAEGER_ENDPOINT
          value: "http://finbot-jaeger-collector.monitoring.svc.cluster.local:14268/api/traces"
        - name: JAEGER_SERVICE_NAME
          value: "finbot-api"
        - name: JAEGER_SAMPLER_TYPE
          value: "probabilistic"
        - name: JAEGER_SAMPLER_PARAM
          value: "0.1"
        - name: PROMETHEUS_METRICS_ENABLED
          value: "true"
        - name: HEALTH_CHECK_TIMEOUT
          value: "5000"
        - name: GRACEFUL_SHUTDOWN_TIMEOUT
          value: "30000"
        - name: CLUSTER_MODE
          value: "true"
        - name: WORKER_PROCESSES
          value: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
            ephemeral-storage: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
            ephemeral-storage: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: uploads
          mountPath: /app/uploads
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15"  # Allow time for load balancer to drain connections
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: uploads
        persistentVolumeClaim:
          claimName: finbot-uploads
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: finbot-api
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["compute-optimized"]
      tolerations:
      - key: node-role.kubernetes.io/spot
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: high-memory
        operator: Equal
        value: "true"
        effect: NoSchedule
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: finbot-api
      terminationGracePeriodSeconds: 45

---
# FinBot API Service
apiVersion: v1
kind: Service
metadata:
  name: finbot-api
  namespace: production
  labels:
    app: finbot-api
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: finbot-api
  ports:
  - name: http
    port: 3001
    targetPort: 3001
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# FinBot API PVC for Uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: finbot-uploads
  namespace: production
  labels:
    app: finbot-api
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: efs-storage
  resources:
    requests:
      storage: 100Gi

---
# FinBot API ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: finbot-api-config
  namespace: production
  labels:
    app: finbot-api
data:
  app.json: |
    {
      "name": "finbot-api",
      "version": "4.0.0",
      "description": "FinBot API Server",
      "main": "dist/server.js",
      "scripts": {
        "start": "node dist/server.js",
        "start:cluster": "node dist/cluster.js"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    }
  
  logging.json: |
    {
      "level": "info",
      "format": "json",
      "transports": [
        {
          "type": "console",
          "colorize": false,
          "timestamp": true
        },
        {
          "type": "file",
          "filename": "/app/logs/app.log",
          "maxsize": 10485760,
          "maxFiles": 5,
          "tailable": true
        },
        {
          "type": "file",
          "filename": "/app/logs/error.log",
          "level": "error",
          "maxsize": 10485760,
          "maxFiles": 5,
          "tailable": true
        }
      ]
    }
  
  database.json: |
    {
      "pool": {
        "min": 5,
        "max": 20,
        "acquireTimeoutMillis": 30000,
        "createTimeoutMillis": 30000,
        "destroyTimeoutMillis": 5000,
        "idleTimeoutMillis": 30000,
        "reapIntervalMillis": 1000,
        "createRetryIntervalMillis": 200
      },
      "migrations": {
        "directory": "./migrations",
        "tableName": "knex_migrations"
      },
      "seeds": {
        "directory": "./seeds"
      }
    }
  
  redis.json: |
    {
      "pool": {
        "min": 5,
        "max": 20
      },
      "retry": {
        "retries": 3,
        "delay": 1000
      },
      "session": {
        "prefix": "finbot:session:",
        "ttl": 86400
      },
      "cache": {
        "prefix": "finbot:cache:",
        "ttl": 3600
      }
    }

---
# FinBot API Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finbot-api-network-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: finbot-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from istio-system (ingress gateway)
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3001
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  # Allow ingress from same namespace (for internal communication)
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
    ports:
    - protocol: TCP
      port: 3001
  egress:
  # Allow egress to database namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  # Allow egress to cache namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  # Allow egress to security namespace (Vault)
  - to:
    - namespaceSelector:
        matchLabels:
          name: security
    ports:
    - protocol: TCP
      port: 8200
  # Allow egress to monitoring namespace (Jaeger)
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 14268
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587  # SMTP

---
# FinBot API Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: finbot-api-pdb
  namespace: production
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: finbot-api