# FinBot v4 - Istio Service Mesh Installation
# High availability Istio control plane configuration

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: finbot-istio-control-plane
  namespace: istio-system
spec:
  # High availability configuration
  values:
    pilot:
      env:
        EXTERNAL_ISTIOD: false
        PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
    global:
      meshID: finbot-mesh
      multiCluster:
        clusterName: finbot-production
      network: finbot-network
      
  components:
    # Istiod (Control Plane)
    pilot:
      k8s:
        replicas: 3
        resources:
          requests:
            cpu: 500m
            memory: 2048Mi
          limits:
            cpu: 1000m
            memory: 4096Mi
        hpaSpec:
          minReplicas: 3
          maxReplicas: 5
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80
        podDisruptionBudget:
          minAvailable: 2
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: istiod
              topologyKey: kubernetes.io/hostname
        tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
          
    # Ingress Gateway
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        replicas: 3
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi
        hpaSpec:
          minReplicas: 3
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80
        service:
          type: LoadBalancer
          ports:
          - port: 15021
            targetPort: 15021
            name: status-port
          - port: 80
            targetPort: 8080
            name: http2
          - port: 443
            targetPort: 8443
            name: https
          - port: 15443
            targetPort: 15443
            name: tls
        podDisruptionBudget:
          minAvailable: 2
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: istio-ingressgateway
              topologyKey: kubernetes.io/hostname
              
    # Egress Gateway
    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        replicas: 2
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        hpaSpec:
          minReplicas: 2
          maxReplicas: 5
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80
        podDisruptionBudget:
          minAvailable: 1
          
  # Mesh configuration
  meshConfig:
    # Enable automatic mTLS
    defaultConfig:
      proxyStatsMatcher:
        inclusionRegexps:
        - ".*outlier_detection.*"
        - ".*circuit_breakers.*"
        - ".*upstream_rq_retry.*"
        - ".*upstream_rq_pending.*"
        - ".*_cx_.*"
      holdApplicationUntilProxyStarts: true
      
    # Access logging
    accessLogFile: /dev/stdout
    accessLogFormat: |
      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
      %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
      %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
      "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
      %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS%
      %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%
      
    # Tracing configuration
    defaultProviders:
      tracing:
      - jaeger
    extensionProviders:
    - name: jaeger
      envoyOtelAls:
        service: jaeger-collector.monitoring.svc.cluster.local
        port: 14250
        
    # Enable automatic sidecar injection
    defaultConfig:
      discoveryRefreshDelay: 10s
      proxyMetadata:
        PILOT_ENABLE_IP_AUTOALLOCATE: true

---
# Istio System Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    name: istio-system
    istio-injection: disabled

---
# Istio Gateway for FinBot
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: finbot-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "finbot.com"
    - "api.finbot.com"
    - "app.finbot.com"
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: finbot-tls-secret
    hosts:
    - "finbot.com"
    - "api.finbot.com"
    - "app.finbot.com"

---
# Default Destination Rule for mTLS
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: default-mtls
  namespace: istio-system
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  exportTo:
  - "*"

---
# Peer Authentication for mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-mtls
  namespace: istio-system
spec:
  mtls:
    mode: STRICT

---
# Authorization Policy for Production Namespace
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: finbot-production-authz
  namespace: production
spec:
  rules:
  - from:
    - source:
        namespaces: ["istio-system", "production"]
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
  - when:
    - key: source.ip
      notValues: ["0.0.0.0/0"]

---
# Service Monitor for Istio Metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh
  namespace: monitoring
  labels:
    app: istio-proxy
spec:
  selector:
    matchLabels:
      app: istio-proxy
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus
  namespaceSelector:
    any: true

---
# Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: finbot-telemetry
  namespace: istio-system
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        destination_service_name:
          value: "%{DESTINATION_SERVICE_NAME | 'unknown'}"
        destination_service_namespace:
          value: "%{DESTINATION_SERVICE_NAMESPACE | 'unknown'}"
  tracing:
  - providers:
    - name: jaeger
  accessLogging:
  - providers:
    - name: otel