# FinBot v4 - Istio Sidecar Injection Configuration
# Automatic sidecar injection for application namespaces

---
# Enable sidecar injection for production namespace
apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    istio-injection: enabled
    name: production
    environment: production

---
# Enable sidecar injection for staging namespace
apiVersion: v1
kind: Namespace
metadata:
  name: staging
  labels:
    istio-injection: enabled
    name: staging
    environment: staging

---
# Sidecar configuration for production workloads
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: finbot-production-sidecar
  namespace: production
spec:
  workloadSelector:
    labels:
      app: finbot
  ingress:
  - port:
      number: 3001
      protocol: HTTP
      name: http-api
    defaultEndpoint: 127.0.0.1:3001
  - port:
      number: 3000
      protocol: HTTP
      name: http-web
    defaultEndpoint: 127.0.0.1:3000
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"
    - "database/*"
    - "cache/*"
    - "monitoring/*"
    - "security/*"
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY

---
# Sidecar configuration for database workloads
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: finbot-database-sidecar
  namespace: database
spec:
  workloadSelector:
    labels:
      component: database
  ingress:
  - port:
      number: 5432
      protocol: TCP
      name: postgres
    defaultEndpoint: 127.0.0.1:5432
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"
    - "monitoring/*"
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY

---
# Sidecar configuration for cache workloads
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: finbot-cache-sidecar
  namespace: cache
spec:
  workloadSelector:
    labels:
      component: cache
  ingress:
  - port:
      number: 6379
      protocol: TCP
      name: redis
    defaultEndpoint: 127.0.0.1:6379
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"
    - "monitoring/*"
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY

---
# EnvoyFilter for additional security headers
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: security-headers
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_ratelimit
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: local_rate_limiter
            token_bucket:
              max_tokens: 1000
              tokens_per_fill: 1000
              fill_interval: 60s
            filter_enabled:
              runtime_key: local_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: local_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED
            response_headers_to_add:
            - append: false
              header:
                key: x-local-rate-limit
                value: 'true'

---
# EnvoyFilter for request/response logging
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: access-logging
  namespace: istio-system
spec:
  configPatches:
  - applyTo: NETWORK_FILTER
    match:
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              format: |
                [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"

---
# Workload Entry for external services
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: external-database
  namespace: production
spec:
  address: external-db.finbot.com
  ports:
    postgres: 5432
  labels:
    app: external-database
    version: v1

---
# Service Entry for external dependencies
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-apis
  namespace: production
spec:
  hosts:
  - api.external-service.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  - number: 80
    name: http
    protocol: HTTP
  location: MESH_EXTERNAL
  resolution: DNS

---
# Virtual Service for traffic routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: finbot-routing
  namespace: production
spec:
  hosts:
  - api.finbot.com
  gateways:
  - istio-system/finbot-gateway
  http:
  - match:
    - uri:
        prefix: /api/v1/
    route:
    - destination:
        host: finbot-api
        port:
          number: 3001
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
    retries:
      attempts: 3
      perTryTimeout: 2s
      retryOn: 5xx,reset,connect-failure,refused-stream
    timeout: 10s
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: finbot-web
        port:
          number: 3000

---
# Destination Rule for load balancing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: finbot-api-destination
  namespace: production
spec:
  host: finbot-api
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    outlierDetection:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 50