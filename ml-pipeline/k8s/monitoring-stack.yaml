apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: ml-serving
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: ml-serving
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: ml-serving
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "ml_serving_rules.yml"
    
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
    
    - job_name: 'tensorflow-serving'
      static_configs:
      - targets: ['tensorflow-serving-service:8501']
      metrics_path: '/monitoring/prometheus/metrics'
      scrape_interval: 10s
    
    - job_name: 'seldon-core'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ml-serving
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_seldon_deployment_id]
        action: keep
        regex: finbot-ml-models
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
    
    - job_name: 'model-serving-api'
      static_configs:
      - targets: ['model-serving-api:8080']
      metrics_path: '/metrics'
      scrape_interval: 10s
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
  
  ml_serving_rules.yml: |
    groups:
    - name: ml_serving_alerts
      rules:
      - alert: ModelServingHighLatency
        expr: histogram_quantile(0.95, rate(tensorflow_serving_request_latency_bucket[5m])) > 1000
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High latency detected in model serving"
          description: "95th percentile latency is {{ $value }}ms for model serving"
      
      - alert: ModelServingHighErrorRate
        expr: rate(tensorflow_serving_request_count{status!="200"}[5m]) / rate(tensorflow_serving_request_count[5m]) > 0.05
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "High error rate in model serving"
          description: "Error rate is {{ $value | humanizePercentage }} for model serving"
      
      - alert: ModelServingDown
        expr: up{job="tensorflow-serving"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Model serving is down"
          description: "TensorFlow Serving instance is down"
      
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{pod=~"tensorflow-serving-.*"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage in model serving pods"
          description: "CPU usage is {{ $value | humanizePercentage }} for pod {{ $labels.pod }}"
      
      - alert: HighMemoryUsage
        expr: container_memory_usage_bytes{pod=~"tensorflow-serving-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage in model serving pods"
          description: "Memory usage is {{ $value | humanizePercentage }} for pod {{ $labels.pod }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ml-serving
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.3.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: ml-serving
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: ml-serving
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
  
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'ml-serving-dashboards'
      orgId: 1
      folder: 'ML Serving'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
  
  ml-serving-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "ML Model Serving Dashboard",
        "tags": ["ml", "serving", "finbot"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(tensorflow_serving_request_count[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Latency",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(tensorflow_serving_request_latency_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(tensorflow_serving_request_latency_bucket[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "singlestat",
            "targets": [
              {
                "expr": "rate(tensorflow_serving_request_count{status!=\"200\"}[5m]) / rate(tensorflow_serving_request_count[5m])",
                "legendFormat": "Error Rate"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Active Models",
            "type": "singlestat",
            "targets": [
              {
                "expr": "count(up{job=\"tensorflow-serving\"} == 1)",
                "legendFormat": "Active Models"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 6, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: ml-serving
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: ml-serving