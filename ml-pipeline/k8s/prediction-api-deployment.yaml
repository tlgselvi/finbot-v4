apiVersion: apps/v1
kind: Deployment
metadata:
  name: prediction-api
  namespace: ml-serving
  labels:
    app: prediction-api
    component: api-gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: prediction-api
  template:
    metadata:
      labels:
        app: prediction-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: model-serving-sa
      containers:
      - name: prediction-api
        image: finbot/prediction-api:v1.0.0
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: MODEL_SERVING_URL
          value: "http://tensorflow-serving-service:8501"
        - name: SELDON_URL
          value: "http://finbot-ml-models:8000"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKERS
          value: "4"
        - name: MAX_CONCURRENT_REQUESTS
          value: "1000"
        - name: CACHE_TTL
          value: "3600"
        - name: ENABLE_METRICS
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: prediction-api-service
  namespace: ml-serving
  labels:
    app: prediction-api
spec:
  selector:
    app: prediction-api
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: prediction-api-hpa
  namespace: ml-serving
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: prediction-api
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prediction-api-ingress
  namespace: ml-serving
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - api.finbot.ml
    secretName: finbot-tls-secret
  rules:
  - host: api.finbot.ml
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prediction-api-service
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prediction-api-config
  namespace: ml-serving
data:
  api_config.yaml: |
    api:
      host: "0.0.0.0"
      port: 8080
      max_concurrent_requests: 1000
      request_timeout: 30.0
      enable_cors: true
      enable_compression: true
    
    caching:
      redis_url: "redis://redis-service:6379"
      default_ttl: 3600
      max_cache_size: "1GB"
      enable_compression: true
      cache_key_prefix: "finbot:predictions:"
    
    batching:
      enable: true
      max_batch_size: 32
      batch_timeout_ms: 50
      max_queue_size: 1000
      batch_strategies: ["time_based", "size_based", "adaptive"]
    
    optimization:
      enable_async_processing: true
      enable_result_streaming: true
      enable_request_deduplication: true
      connection_pool_size: 100
      keep_alive_timeout: 30
    
    monitoring:
      enable_metrics: true
      metrics_interval: 10
      enable_tracing: true
      log_slow_requests: true
      slow_request_threshold_ms: 1000
    
    rate_limiting:
      enable: true
      requests_per_minute: 1000
      burst_size: 100
      per_user_limit: 100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ml-serving
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        ports:
        - containerPort: 6379
        args:
        - redis-server
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        - --save
        - ""
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ml-serving
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP