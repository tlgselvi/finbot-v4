# FinBot v4 - Nginx CDN Configuration
# High-performance CDN configuration with caching and optimization

worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format cdn_format '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'rt=$request_time uct="$upstream_connect_time" '
                         'uht="$upstream_header_time" urt="$upstream_response_time" '
                         'cache=$upstream_cache_status';

    access_log /var/log/nginx/cdn_access.log cdn_format;
    error_log /var/log/nginx/cdn_error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Cache settings
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:100m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/images levels=1:2 keys_zone=image_cache:100m max_size=2g inactive=30d use_temp_path=off;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=cdn_limit:10m rate=10r/s;

    # Upstream backend
    upstream finbot_backend {
        server finbot-api:3001;
        keepalive 32;
    }

    # CDN Server
    server {
        listen 80;
        server_name cdn.finbot.local localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Rate limiting
        limit_req zone=cdn_limit burst=20 nodelay;

        # Static assets with long cache
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            root /usr/share/nginx/html/static;
            
            # Cache configuration
            proxy_cache static_cache;
            proxy_cache_valid 200 301 302 1y;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;
            
            # Headers
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Served-By "FinBot-CDN";
            
            # CORS for fonts
            location ~* \.(woff|woff2|ttf|eot)$ {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET";
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Try file, then fallback to backend
            try_files $uri @backend;
        }

        # Image optimization
        location ~* \.(png|jpg|jpeg|gif|webp)$ {
            root /usr/share/nginx/html/static;
            
            # Cache configuration
            proxy_cache image_cache;
            proxy_cache_valid 200 30d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            
            # Headers
            expires 30d;
            add_header Cache-Control "public";
            add_header X-Cache-Status $upstream_cache_status;
            add_header Vary "Accept";
            
            # WebP support
            set $webp_suffix "";
            if ($http_accept ~* "webp") {
                set $webp_suffix ".webp";
            }
            
            try_files $uri$webp_suffix $uri @backend;
        }

        # API requests (no cache)
        location /api/ {
            proxy_pass http://finbot_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Served-By-CDN "true";
            proxy_cache_bypass $http_upgrade;
            
            # No caching for API
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Backend fallback
        location @backend {
            proxy_pass http://finbot_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Served-By-CDN "true";
            
            # Cache for backend responses
            proxy_cache static_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating;
            
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Cache purge endpoint (restricted)
        location /purge {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            
            proxy_cache_purge static_cache $scheme$proxy_host$request_uri;
        }

        # Nginx status (restricted)
        location /nginx_status {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            
            stub_status on;
            access_log off;
        }
    }

    # HTTPS Server (if SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name cdn.finbot.local;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # HSTS
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     
    #     # Include same location blocks as HTTP server
    # }
}